type GeneSymbol {
   _id: Long!
   sid: String!
   status: String
   taxid: String!
   genes: [Gene] @relation(name: "MAPS", direction: IN)
}

type Protein {
   _id: Long!
   category: String
   desc: String
   length: String
   name: String
   sid: String!
   source: String!
   status: String
   taxid: String!
   version: String
   association: [GOTerm] @relation(name: "ASSOCIATION", direction: OUT)
   ASSOCIATION_rel: [ASSOCIATION]
}

type GOTerm {
   _id: Long!
   name: String!
   namespace: String!
   obsolete: Boolean!
   sid: String!
   subsets: [String]!
   is_a: [GOTerm] @relation(name: "IS_A", direction: OUT)
   IS_A_rel: [IS_A]
   proteins: [Protein] @relation(name: "ASSOCIATION", direction: IN)
}


type Patent {
   _id: Long!
   filing_date: String
   filing_key: String!
   jurisdiction: String!
   lens_id: String!
   lens_url: String!
   pub_date: String
   pub_key: String!
   type: String!
   patent_has_patentabstract: [PatentAbstract] @relation(name: "PATENT_HAS_PATENTABSTRACT", direction: OUT)
   PATENT_HAS_PATENTABSTRACT_rel: [PATENT_HAS_PATENTABSTRACT]
   patent_has_lensid: [LensID] @relation(name: "PATENT_HAS_LENSID", direction: OUT)
   patent_has_patentnumber: [PatentNumber] @relation(name: "PATENT_HAS_PATENTNUMBER", direction: OUT)
   inventor: [Entity] @relation(name: "INVENTOR", direction: OUT)
   INVENTOR_rel: [INVENTOR]
   applicant: [Entity] @relation(name: "APPLICANT", direction: OUT)
   APPLICANT_rel: [APPLICANT]
   patent_has_patentclassificationcollection: [PatentClassificationCollection] @relation(name: "PATENT_HAS_PATENTCLASSIFICATIONCOLLECTION", direction: OUT)
   patent_has_patenttitle: [PatentTitle] @relation(name: "PATENT_HAS_PATENTTITLE", direction: OUT)
   PATENT_HAS_PATENTTITLE_rel: [PATENT_HAS_PATENTTITLE]
   patent_has_patentcitationcollection: [PatentCitationCollection] @relation(name: "PATENT_HAS_PATENTCITATIONCOLLECTION", direction: OUT)
   patent_has_patentclaim: [PatentClaim] @relation(name: "PATENT_HAS_PATENTCLAIM", direction: OUT)
   PATENT_HAS_PATENTCLAIM_rel: [PATENT_HAS_PATENTCLAIM]
   patent_has_patentdescription: [PatentDescription] @relation(name: "PATENT_HAS_PATENTDESCRIPTION", direction: OUT)
   PATENT_HAS_PATENTDESCRIPTION_rel: [PATENT_HAS_PATENTDESCRIPTION]
   owner: [Entity] @relation(name: "OWNER", direction: OUT)
   OWNER_rel: [OWNER]
}

type PatentAbstract {
   _id: Long!
   _hash_id: String!
   lang: String!
   text: String!
   patents: [Patent] @relation(name: "PATENT_HAS_PATENTABSTRACT", direction: IN)
}

type LensID {
   _id: Long!
   id: String!
   patents: [Patent] @relation(name: "PATENT_HAS_LENSID", direction: IN)
   patentfamilys: [PatentFamily] @relation(name: "PATENTFAMILY_HAS_LENSID", direction: IN)
}

type PatentNumber {
   _id: Long!
   pub_key: String!
   patents: [Patent] @relation(name: "PATENT_HAS_PATENTNUMBER", direction: IN)
   patentliteraturecitations: [PatentLiteratureCitation] @relation(name: "PATENTLITERATURECITATION_HAS_PATENTNUMBER", direction: IN)
}

type Entity {
   _id: Long!
   name: String!
   patents_inventor: [Patent] @relation(name: "INVENTOR", direction: IN)
   patents_applicant: [Patent] @relation(name: "APPLICANT", direction: IN)
   patents_owner: [Patent] @relation(name: "OWNER", direction: IN)
}

type PatentClassificationCollection {
   _id: Long!
   id: String!
   patentclassificationcollection_has_internationalpatentclassification: [InternationalPatentClassification] @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_INTERNATIONALPATENTCLASSIFICATION", direction: OUT)
   PATENTCLASSIFICATIONCOLLECTION_HAS_INTERNATIONALPATENTCLASSIFICATION_rel: [PATENTCLASSIFICATIONCOLLECTION_HAS_INTERNATIONALPATENTCLASSIFICATION]
   patentclassificationcollection_has_cooperativepatentclassification: [CooperativePatentClassification] @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_COOPERATIVEPATENTCLASSIFICATION", direction: OUT)
   PATENTCLASSIFICATIONCOLLECTION_HAS_COOPERATIVEPATENTCLASSIFICATION_rel: [PATENTCLASSIFICATIONCOLLECTION_HAS_COOPERATIVEPATENTCLASSIFICATION]
   patentclassificationcollection_has_uspatentclassification: [USPatentClassification] @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_USPATENTCLASSIFICATION", direction: OUT)
   PATENTCLASSIFICATIONCOLLECTION_HAS_USPATENTCLASSIFICATION_rel: [PATENTCLASSIFICATIONCOLLECTION_HAS_USPATENTCLASSIFICATION]
   patents: [Patent] @relation(name: "PATENT_HAS_PATENTCLASSIFICATIONCOLLECTION", direction: IN)
}

type InternationalPatentClassification {
   _id: Long!
   classification_ipc: String!
   patentclassificationcollections: [PatentClassificationCollection] @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_INTERNATIONALPATENTCLASSIFICATION", direction: IN)
}

type PatentTitle {
   _id: Long!
   _hash_id: String!
   lang: String!
   text: String!
   patents: [Patent] @relation(name: "PATENT_HAS_PATENTTITLE", direction: IN)
}

type PatentFamily {
   _id: Long!
   family_id: Int!
   size: Int!
   type: String!
   patentfamily_has_lensid: [LensID] @relation(name: "PATENTFAMILY_HAS_LENSID", direction: OUT)
   PATENTFAMILY_HAS_LENSID_rel: [PATENTFAMILY_HAS_LENSID]
}

type CooperativePatentClassification {
   _id: Long!
   classification_cpc: String!
   patentclassificationcollections: [PatentClassificationCollection] @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_COOPERATIVEPATENTCLASSIFICATION", direction: IN)
}

type PatentLiteratureCitation {
   _id: Long!
   _hash_id: String!
   lens_id: String
   pub_key: String!
   patentliteraturecitation_has_patentnumber: [PatentNumber] @relation(name: "PATENTLITERATURECITATION_HAS_PATENTNUMBER", direction: OUT)
   patentcitationcollections: [PatentCitationCollection] @relation(name: "PATENTCITATIONCOLLECTION_HAS_PATENTLITERATURECITATION", direction: IN)
}

type PatentCitationCollection {
   _id: Long!
   id: String!
   patentcitationcollection_has_patentliteraturecitation: [PatentLiteratureCitation] @relation(name: "PATENTCITATIONCOLLECTION_HAS_PATENTLITERATURECITATION", direction: OUT)
   PATENTCITATIONCOLLECTION_HAS_PATENTLITERATURECITATION_rel: [PATENTCITATIONCOLLECTION_HAS_PATENTLITERATURECITATION]
   patentcitationcollection_has_nonpatentliteraturecitation: [NonPatentLiteratureCitation] @relation(name: "PATENTCITATIONCOLLECTION_HAS_NONPATENTLITERATURECITATION", direction: OUT)
   PATENTCITATIONCOLLECTION_HAS_NONPATENTLITERATURECITATION_rel: [PATENTCITATIONCOLLECTION_HAS_NONPATENTLITERATURECITATION]
   patents: [Patent] @relation(name: "PATENT_HAS_PATENTCITATIONCOLLECTION", direction: IN)
}

type NonPatentLiteratureCitation {
   _id: Long!
   _hash_id: String!
   cit_text: String!
   patentcitationcollections: [PatentCitationCollection] @relation(name: "PATENTCITATIONCOLLECTION_HAS_NONPATENTLITERATURECITATION", direction: IN)
}

type PatentClaim {
   _id: Long!
   _hash_id: String!
   lang: String!
   text: String!
   patents: [Patent] @relation(name: "PATENT_HAS_PATENTCLAIM", direction: IN)
}

type PatentDescription {
   _id: Long!
   _hash_id: String!
   lang: String!
   text: String!
   patents: [Patent] @relation(name: "PATENT_HAS_PATENTDESCRIPTION", direction: IN)
}

type USPatentClassification {
   _id: Long!
   classification_us: String!
   patentclassificationcollections: [PatentClassificationCollection] @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_USPATENTCLASSIFICATION", direction: IN)
}

type AuthorCollection {
   _id: Long!
   id: String!
   authorcollection_has_author: [Author] @relation(name: "AUTHORCOLLECTION_HAS_AUTHOR", direction: OUT)
   AUTHORCOLLECTION_HAS_AUTHOR_rel: [AUTHORCOLLECTION_HAS_AUTHOR]
   papers: [Paper] @relation(name: "PAPER_HAS_AUTHORCOLLECTION", direction: IN)
}

type Author {
   _id: Long!
   _hash_id: String!
   email: String
   first: String
   fist: String
   last: String
   middle: String
   suffix: String
   author_has_affiliation: [Affiliation] @relation(name: "AUTHOR_HAS_AFFILIATION", direction: OUT)
   authorcollections: [AuthorCollection] @relation(name: "AUTHORCOLLECTION_HAS_AUTHOR", direction: IN)
}

type Paper {
   _id: Long!
   _hash_id: String!
   cord_uid: String!
   journal: String
   publish_time: String
   source: String!
   title: String
   url: String
   paper_has_authorcollection: [AuthorCollection] @relation(name: "PAPER_HAS_AUTHORCOLLECTION", direction: OUT)
   paper_has_paperid: [PaperID] @relation(name: "PAPER_HAS_PAPERID", direction: OUT)
   PAPER_HAS_PAPERID_rel: [PAPER_HAS_PAPERID]
   paper_has_referencecollection: [ReferenceCollection] @relation(name: "PAPER_HAS_REFERENCECOLLECTION", direction: OUT)
   paper_has_bodytextcollection: [BodyTextCollection] @relation(name: "PAPER_HAS_BODYTEXTCOLLECTION", direction: OUT)
   paper_has_abstractcollection: [AbstractCollection] @relation(name: "PAPER_HAS_ABSTRACTCOLLECTION", direction: OUT)
}

type PaperID {
   _id: Long!
   id: String!
   type: String!
   papers: [Paper] @relation(name: "PAPER_HAS_PAPERID", direction: IN)
   references: [Reference] @relation(name: "REFERENCE_HAS_PAPERID", direction: IN)
   citations: [Citation] @relation(name: "HAS_PUBLICATION_ID", direction: IN)
}

type Fragment_FromBodyText {
   _id: Long!
   kind: String!
   sequence: Int!
   text: String!
   mentions: [GeneSymbol] @relation(name: "MENTIONS", direction: OUT)
   bodytexts: [BodyText] @relation(name: "HAS_FRAGMENT", direction: IN)
}

type ReferenceCollection {
   _id: Long!
   id: String!
   referencecollection_has_reference: [Reference] @relation(name: "REFERENCECOLLECTION_HAS_REFERENCE", direction: OUT)
   REFERENCECOLLECTION_HAS_REFERENCE_rel: [REFERENCECOLLECTION_HAS_REFERENCE]
   papers: [Paper] @relation(name: "PAPER_HAS_REFERENCECOLLECTION", direction: IN)
}

type Fragment_FromAbstract {
   _id: Long!
   kind: String!
   sequence: Int!
   text: String!
   mentions: [GeneSymbol] @relation(name: "MENTIONS", direction: OUT)
}

type Reference {
   _id: Long!
   _hash_id: String!
   issn: String
   name: String!
   pages: String
   ref_id: String
   title: String
   venue: String
   volume: String
   year: Int
   reference_has_paperid: [PaperID] @relation(name: "REFERENCE_HAS_PAPERID", direction: OUT)
   REFERENCE_HAS_PAPERID_rel: [REFERENCE_HAS_PAPERID]
   referencecollections: [ReferenceCollection] @relation(name: "REFERENCECOLLECTION_HAS_REFERENCE", direction: IN)
   citations: [Citation] @relation(name: "CITATION_HAS_REFERENCE", direction: IN)
}

type Fragment_FromPatentDescription {
   _id: Long!
   kind: String!
   sequence: Int!
   text: String!
   mentions: [GeneSymbol] @relation(name: "MENTIONS", direction: OUT)
}

type Citation {
   _id: Long!
   _hash_id: String
   end: Int
   mention: String
   name: String
   start: Int
   text: String
   citation_has_reference: [Reference] @relation(name: "CITATION_HAS_REFERENCE", direction: OUT)
   is_reference_type: [ReferenceType] @relation(name: "IS_REFERENCE_TYPE", direction: OUT)
   has_publication_id: [PaperID] @relation(name: "HAS_PUBLICATION_ID", direction: OUT)
   bodytexts: [BodyText] @relation(name: "BODYTEXT_HAS_CITATION", direction: IN)
   abstracts: [Abstract] @relation(name: "ABSTRACT_HAS_CITATION", direction: IN)
   clinicaltrials: [ClinicalTrial] @relation(name: "REFERS_TO", direction: IN)
}

type Fragment_FromPatentTitle {
   _id: Long!
   kind: String!
   sequence: Int!
   text: String!
}

type BodyText {
   _id: Long!
   _hash_id: String!
   section: String!
   text: String!
   bodytext_has_citation: [Citation] @relation(name: "BODYTEXT_HAS_CITATION", direction: OUT)
   BODYTEXT_HAS_CITATION_rel: [BODYTEXT_HAS_CITATION]
   bodytextcollections: [BodyTextCollection] @relation(name: "BODYTEXTCOLLECTION_HAS_BODYTEXT", direction: IN)
}

type Fragment_FromPatentAbstract {
   _id: Long!
   kind: String!
   sequence: Int!
   text: String!
}

type BodyTextCollection {
   _id: Long!
   id: String!
   bodytextcollection_has_bodytext: [BodyText] @relation(name: "BODYTEXTCOLLECTION_HAS_BODYTEXT", direction: OUT)
   BODYTEXTCOLLECTION_HAS_BODYTEXT_rel: [BODYTEXTCOLLECTION_HAS_BODYTEXT]
   papers: [Paper] @relation(name: "PAPER_HAS_BODYTEXTCOLLECTION", direction: IN)
}

type Fragment_FromPatentClaim {
   _id: Long!
   kind: String!
   sequence: Int!
   text: String!
}

type AbstractCollection {
   _id: Long!
   id: String!
   abstractcollection_has_abstract: [Abstract] @relation(name: "ABSTRACTCOLLECTION_HAS_ABSTRACT", direction: OUT)
   ABSTRACTCOLLECTION_HAS_ABSTRACT_rel: [ABSTRACTCOLLECTION_HAS_ABSTRACT]
   papers: [Paper] @relation(name: "PAPER_HAS_ABSTRACTCOLLECTION", direction: IN)
}

type Abstract {
   _id: Long!
   _hash_id: String!
   section: String
   text: String!
   abstract_has_citation: [Citation] @relation(name: "ABSTRACT_HAS_CITATION", direction: OUT)
   ABSTRACT_HAS_CITATION_rel: [ABSTRACT_HAS_CITATION]
   abstractcollections: [AbstractCollection] @relation(name: "ABSTRACTCOLLECTION_HAS_ABSTRACT", direction: IN)
}

type Affiliation {
   _id: Long!
   _hash_id: String!
   institution: String!
   laboratory: String!
   affiliation_has_location: [Location] @relation(name: "AFFILIATION_HAS_LOCATION", direction: OUT)
   authors: [Author] @relation(name: "AUTHOR_HAS_AFFILIATION", direction: IN)
}

type Location {
   _id: Long!
   _hash_id: String!
   addrLine: String
   country: String
   postBox: String
   postCode: String
   region: String
   settlement: String
   affiliations: [Affiliation] @relation(name: "AFFILIATION_HAS_LOCATION", direction: IN)
}

type ClinicalTrial {
   _id: Long!
   NCTId: String!
   data_source: String!
   url: String!
   is_type: [StudyType] @relation(name: "IS_TYPE", direction: OUT)
   has_identification: [StudyIdentification] @relation(name: "HAS_IDENTIFICATION", direction: OUT)
   has_status: [Status] @relation(name: "HAS_STATUS", direction: OUT)
   was_stopped: [StopReason] @relation(name: "WAS_STOPPED", direction: OUT)
   started_at: [Start] @relation(name: "STARTED_AT", direction: OUT)
   completed_at: [Completed] @relation(name: "COMPLETED_AT", direction: OUT)
   is_conducted_by: [Investigator] @relation(name: "IS_CONDUCTED_BY", direction: OUT)
   is_sponsored_by: [Sponsor] @relation(name: "IS_SPONSORED_BY", direction: OUT)
   is_supported_by: [Collaborator] @relation(name: "IS_SUPPORTED_BY", direction: OUT)
   is_fda_regulated_device: [Response] @relation(name: "IS_FDA_REGULATED_DEVICE", direction: OUT)
   is_unapproved_device: [Response] @relation(name: "IS_UNAPPROVED_DEVICE", direction: OUT)
   is_fda_regulated_drug: [Response] @relation(name: "IS_FDA_REGULATED_DRUG", direction: OUT)
   has_expanded_access: [Response] @relation(name: "HAS_EXPANDED_ACCESS", direction: OUT)
   has_description: [Description] @relation(name: "HAS_DESCRIPTION", direction: OUT)
   is_studying: [Condition] @relation(name: "IS_STUDYING", direction: OUT)
   has_study_design: [Design] @relation(name: "HAS_STUDY_DESIGN", direction: OUT)
   has_observation_period: [ObservationPeriod] @relation(name: "HAS_OBSERVATION_PERIOD", direction: OUT)
   has_smaples_retained_in_biorepository: [BioSpecimen] @relation(name: "HAS_SMAPLES_RETAINED_IN_BIOREPOSITORY", direction: OUT)
   has_study_arms: [Arm] @relation(name: "HAS_STUDY_ARMS", direction: OUT)
   investigates_intervention: [Intervention] @relation(name: "INVESTIGATES_INTERVENTION", direction: OUT)
   has_primary_outcome: [Outcome] @relation(name: "HAS_PRIMARY_OUTCOME", direction: OUT)
   has_secondary_outcome: [Outcome] @relation(name: "HAS_SECONDARY_OUTCOME", direction: OUT)
   has_other_outcome: [Outcome] @relation(name: "HAS_OTHER_OUTCOME", direction: OUT)
   has_study_population: [StudyPopulation] @relation(name: "HAS_STUDY_POPULATION", direction: OUT)
   has_inclusion_criteria: [InclusionCriteria] @relation(name: "HAS_INCLUSION_CRITERIA", direction: OUT)
   has_exclusion_criteria: [ExclusionCriteria] @relation(name: "HAS_EXCLUSION_CRITERIA", direction: OUT)
   has_contact_person: [Contact] @relation(name: "HAS_CONTACT_PERSON", direction: OUT)
   conducted_at: [Facility] @relation(name: "CONDUCTED_AT", direction: OUT)
   refers_to: [Citation] @relation(name: "REFERS_TO", direction: OUT)
   use_reference_as: [ReferenceType] @relation(name: "USE_REFERENCE_AS", direction: OUT)
   refers_to_url: [Link] @relation(name: "REFERS_TO_URL", direction: OUT)
   is_phase: [Phase] @relation(name: "IS_PHASE", direction: OUT)
   has_purpose: [Purpose] @relation(name: "HAS_PURPOSE", direction: OUT)
}

type StudyType {
   _id: Long!
   type: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "IS_TYPE", direction: IN)
}

type StudyIdentification {
   _id: Long!
   acronym: String!
   studyId: String!
   has_title: [Title] @relation(name: "HAS_TITLE", direction: OUT)
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_IDENTIFICATION", direction: IN)
}

type Title {
   _id: Long!
   briefTitle: String!
   officialTitle: String!
   studyidentifications: [StudyIdentification] @relation(name: "HAS_TITLE", direction: IN)
}

type Status {
   _id: Long!
   status: String!
   has_reason: [StopReason] @relation(name: "HAS_REASON", direction: OUT)
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_STATUS", direction: IN)
}

type StopReason {
   _id: Long!
   reason: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "WAS_STOPPED", direction: IN)
   statuss: [Status] @relation(name: "HAS_REASON", direction: IN)
}

type Start {
   _id: Long!
   date: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "STARTED_AT", direction: IN)
}

type Completed {
   _id: Long!
   completionDate: String!
   primaryCompletionDate: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "COMPLETED_AT", direction: IN)
}

type Responsible {
   _id: Long!
   type: String!
   is_resposible: [Investigator] @relation(name: "IS_RESPOSIBLE", direction: OUT)
}

type Investigator {
   _id: Long!
   affiliation: String!
   name: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "IS_CONDUCTED_BY", direction: IN)
   responsibles: [Responsible] @relation(name: "IS_RESPOSIBLE", direction: IN)
}

type GeneSymbol_OmitSpecialChar {
   _id: Long!
   sid: String!
   status: String
   taxid: String!
}

type Sponsor {
   _id: Long!
   name: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "IS_SPONSORED_BY", direction: IN)
}

type GeneSymbol_OmitLength {
   _id: Long!
   sid: String!
   status: String!
   taxid: String!
}

type Collaborator {
   _id: Long!
   name: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "IS_SUPPORTED_BY", direction: IN)
}

type GeneSymbol_OmitWord {
   _id: Long!
   sid: String!
   status: String
   taxid: String!
}

type Response {
   _id: Long!
   YN: String!
   clinicaltrials_is_fda_regulated_device: [ClinicalTrial] @relation(name: "IS_FDA_REGULATED_DEVICE", direction: IN)
   clinicaltrials_is_unapproved_device: [ClinicalTrial] @relation(name: "IS_UNAPPROVED_DEVICE", direction: IN)
   clinicaltrials_is_fda_regulated_drug: [ClinicalTrial] @relation(name: "IS_FDA_REGULATED_DRUG", direction: IN)
   clinicaltrials_has_expanded_access: [ClinicalTrial] @relation(name: "HAS_EXPANDED_ACCESS", direction: IN)
}

type Description {
   _id: Long!
   detailed: String!
   summary: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_DESCRIPTION", direction: IN)
}

type Condition {
   _id: Long!
   disease: String!
   has_keyword: [Keyword] @relation(name: "HAS_KEYWORD", direction: OUT)
   clinicaltrials: [ClinicalTrial] @relation(name: "IS_STUDYING", direction: IN)
}

type Keyword {
   _id: Long!
   word: String!
   conditions: [Condition] @relation(name: "HAS_KEYWORD", direction: IN)
}

type Design {
   _id: Long!
   description: String
   model: String
   name: String
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_STUDY_DESIGN", direction: IN)
   arms: [Arm] @relation(name: "BELONGS_TO_MODEL", direction: IN)
}

type ObservationPeriod {
   _id: Long!
   time: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_OBSERVATION_PERIOD", direction: IN)
}

type BioSpecimen {
   _id: Long!
   description: String!
   retension: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_SMAPLES_RETAINED_IN_BIOREPOSITORY", direction: IN)
}

type Arm {
   _id: Long!
   description: String
   name: String!
   belongs_to_model: [Design] @relation(name: "BELONGS_TO_MODEL", direction: OUT)
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_STUDY_ARMS", direction: IN)
}

type Intervention {
   _id: Long!
   description: String!
   name: String!
   type: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "INVESTIGATES_INTERVENTION", direction: IN)
}

type Outcome {
   _id: Long!
   description: String
   name: String!
   time: String!
   type: String!
   clinicaltrials_has_primary_outcome: [ClinicalTrial] @relation(name: "HAS_PRIMARY_OUTCOME", direction: IN)
   clinicaltrials_has_secondary_outcome: [ClinicalTrial] @relation(name: "HAS_SECONDARY_OUTCOME", direction: IN)
   clinicaltrials_has_other_outcome: [ClinicalTrial] @relation(name: "HAS_OTHER_OUTCOME", direction: IN)
}

type StudyPopulation {
   _id: Long!
   name: String!
   sampling: String!
   includes_gender: [Gender] @relation(name: "INCLUDES_GENDER", direction: OUT)
   includes_age_range: [AgeRange] @relation(name: "INCLUDES_AGE_RANGE", direction: OUT)
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_STUDY_POPULATION", direction: IN)
}

type Gender {
   _id: Long!
   description: String!
   name: String!
   studypopulations: [StudyPopulation] @relation(name: "INCLUDES_GENDER", direction: IN)
}

type AgeRange {
   _id: Long!
   maxAge: String!
   minAge: String!
   studypopulations: [StudyPopulation] @relation(name: "INCLUDES_AGE_RANGE", direction: IN)
}

type InclusionCriteria {
   _id: Long!
   criteria: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_INCLUSION_CRITERIA", direction: IN)
}

type ExclusionCriteria {
   _id: Long!
   criteria: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_EXCLUSION_CRITERIA", direction: IN)
}

type Contact {
   _id: Long!
   email: String!
   name: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_CONTACT_PERSON", direction: IN)
}

type Facility {
   _id: Long!
   name: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "CONDUCTED_AT", direction: IN)
}

type City {
   _id: Long!
   name: String!
   located_in: [Country] @relation(name: "LOCATED_IN", direction: OUT)
}

type ReferenceType {
   _id: Long!
   name: String!
   citations: [Citation] @relation(name: "IS_REFERENCE_TYPE", direction: IN)
   clinicaltrials: [ClinicalTrial] @relation(name: "USE_REFERENCE_AS", direction: IN)
}

type Link {
   _id: Long!
   url: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "REFERS_TO_URL", direction: IN)
}

type Phase {
   _id: Long!
   phase: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "IS_PHASE", direction: IN)
}

type Purpose {
   _id: Long!
   name: String!
   clinicaltrials: [ClinicalTrial] @relation(name: "HAS_PURPOSE", direction: IN)
}

type Compound {
   _id: Long!
   _id: String!
   accession_numbers: String
   atc_codes: String
   cas_number: String
   categories: String
   chebi_id: String
   chemspider_id: Float
   company: String
   compound_class: String
   description: String
   drug_class: String
   drug_formula: String
   drug_smiles: String
   drug_type: String
   drugbank_id: String
   groups: String
   highest_stat: String
   inchi: String
   inchikey: String
   indication: String
   kegg_drug_id: String
   kegg_id: String
   mechanism: String
   name: String
   pubchem_id: String
   source: String!
   source_url: String!
   synonyms: String
   therapeutic_class: String
   ttd_id: String
   type: String
   unii: String
   IS_INHIBITOR_rel: [IS_INHIBITOR]
   TARGETS_rel: [TARGETS]
   IS_ANTAGONIST_rel: [IS_ANTAGONIST]
   IS_AGONIST_rel: [IS_AGONIST]
   IS_ACTIVATOR_rel: [IS_ACTIVATOR]
   IS_BINDER_rel: [IS_BINDER]
}

type Target {
   _id: Long!
   _id: String!
   bio_class: String
   ec_number: String
   function: String
   gene_name: String
   license: String!
   name: String!
   sequence: String
   source: String!
   synonyms: String
   ttd_id: String!
   type: String!
   uniprot_id: String
   compounds_is_inhibitor: [Compound] @relation(name: "IS_INHIBITOR", direction: IN)
   compounds_targets: [Compound] @relation(name: "TARGETS", direction: IN)
   compounds_is_antagonist: [Compound] @relation(name: "IS_ANTAGONIST", direction: IN)
   compounds_is_agonist: [Compound] @relation(name: "IS_AGONIST", direction: IN)
   compounds_is_activator: [Compound] @relation(name: "IS_ACTIVATOR", direction: IN)
   compounds_is_binder: [Compound] @relation(name: "IS_BINDER", direction: IN)
}

type Disease {
   _id: Long!
   _id: String!
   definition: String
   doid: String!
   license: String
   link: String
   name: String
   source: String
   associates_dag: [Gene] @relation(name: "ASSOCIATES_DaG", direction: OUT)
   ASSOCIATES_DaG_rel: [ASSOCIATES_DaG]
   localizes_dla: [Anatomy] @relation(name: "LOCALIZES_DlA", direction: OUT)
   LOCALIZES_DlA_rel: [LOCALIZES_DlA]
}

type Anatomy {
   _id: Long!
   _id: String!
   bto_id: String
   mesh_id: String!
   mesh_name: String!
   name: String!
   uberon_id: String!
   diseases: [Disease] @relation(name: "LOCALIZES_DlA", direction: IN)
}

type NamedEntity {
   _id: Long!
   external_ids: [String]
   id: String!
   type: String!
   value: String!
}

type REPORTED @relation(name: "REPORTED") {
  from: Province!
  to: DailyReport_Latest!
  source: String!
}

type PART_OF @relation(name: "PART_OF") {
  from: Province!
  to: Country!
  source: String!
}

type CURRENT_TOTAL @relation(name: "CURRENT_TOTAL") {
  from: Country!
  to: AgeGroup!
  count: Int!
}

type CURRENT_MALE @relation(name: "CURRENT_MALE") {
  from: Country!
  to: AgeGroup!
  count: Int!
}

type CURRENT_FEMALE @relation(name: "CURRENT_FEMALE") {
  from: Country!
  to: AgeGroup!
  count: Int!
}




type IS_A @relation(name: "IS_A") {
  from: GOTerm!
  to: GOTerm!
  position: Int
  source: String
}

type ASSOCIATION @relation(name: "ASSOCIATION") {
  from: Protein!
  to: GOTerm!
  evidence: String!
  qualifier: String
}



type EXPRESSED @relation(name: "EXPRESSED") {
  from: Gene!
  to: GtexDetailedTissue!
  val: String!
}

type CHILD @relation(name: "CHILD") {
  from: Pathway!
  to: Pathway!
  source: String!
}

type MEMBER @relation(name: "MEMBER") {
  from: Gene!
  to: Pathway!
  evidence: String!
  source: String!
}

type PATENT_HAS_PATENTABSTRACT @relation(name: "PATENT_HAS_PATENTABSTRACT") {
  from: Patent!
  to: PatentAbstract!
  position: Int!
}



type INVENTOR @relation(name: "INVENTOR") {
  from: Patent!
  to: Entity!
  position: Int!
}

type APPLICANT @relation(name: "APPLICANT") {
  from: Patent!
  to: Entity!
  position: Int!
}

type PATENTCLASSIFICATIONCOLLECTION_HAS_INTERNATIONALPATENTCLASSIFICATION @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_INTERNATIONALPATENTCLASSIFICATION") {
  from: PatentClassificationCollection!
  to: InternationalPatentClassification!
  position: Int!
}


type PATENT_HAS_PATENTTITLE @relation(name: "PATENT_HAS_PATENTTITLE") {
  from: Patent!
  to: PatentTitle!
  position: Int!
}

type PATENTFAMILY_HAS_LENSID @relation(name: "PATENTFAMILY_HAS_LENSID") {
  from: PatentFamily!
  to: LensID!
  position: Int!
}

type PATENTCLASSIFICATIONCOLLECTION_HAS_COOPERATIVEPATENTCLASSIFICATION @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_COOPERATIVEPATENTCLASSIFICATION") {
  from: PatentClassificationCollection!
  to: CooperativePatentClassification!
  position: Int!
}


type PATENTCITATIONCOLLECTION_HAS_PATENTLITERATURECITATION @relation(name: "PATENTCITATIONCOLLECTION_HAS_PATENTLITERATURECITATION") {
  from: PatentCitationCollection!
  to: PatentLiteratureCitation!
  position: Int!
}


type PATENTCITATIONCOLLECTION_HAS_NONPATENTLITERATURECITATION @relation(name: "PATENTCITATIONCOLLECTION_HAS_NONPATENTLITERATURECITATION") {
  from: PatentCitationCollection!
  to: NonPatentLiteratureCitation!
  position: Int!
}

type PATENT_HAS_PATENTCLAIM @relation(name: "PATENT_HAS_PATENTCLAIM") {
  from: Patent!
  to: PatentClaim!
  position: Int!
}

type PATENT_HAS_PATENTDESCRIPTION @relation(name: "PATENT_HAS_PATENTDESCRIPTION") {
  from: Patent!
  to: PatentDescription!
  position: Int!
}

type OWNER @relation(name: "OWNER") {
  from: Patent!
  to: Entity!
  position: Int!
}

type PATENTCLASSIFICATIONCOLLECTION_HAS_USPATENTCLASSIFICATION @relation(name: "PATENTCLASSIFICATIONCOLLECTION_HAS_USPATENTCLASSIFICATION") {
  from: PatentClassificationCollection!
  to: USPatentClassification!
  position: Int!
}

type AUTHORCOLLECTION_HAS_AUTHOR @relation(name: "AUTHORCOLLECTION_HAS_AUTHOR") {
  from: AuthorCollection!
  to: Author!
  position: Int!
}


type PAPER_HAS_PAPERID @relation(name: "PAPER_HAS_PAPERID") {
  from: Paper!
  to: PaperID!
  position: Int!
}

type REFERENCECOLLECTION_HAS_REFERENCE @relation(name: "REFERENCECOLLECTION_HAS_REFERENCE") {
  from: ReferenceCollection!
  to: Reference!
  position: Int!
}



type BODYTEXT_HAS_CITATION @relation(name: "BODYTEXT_HAS_CITATION") {
  from: BodyText!
  to: Citation!
  position: Int!
}

type BODYTEXTCOLLECTION_HAS_BODYTEXT @relation(name: "BODYTEXTCOLLECTION_HAS_BODYTEXT") {
  from: BodyTextCollection!
  to: BodyText!
  position: Int!
}


type ABSTRACTCOLLECTION_HAS_ABSTRACT @relation(name: "ABSTRACTCOLLECTION_HAS_ABSTRACT") {
  from: AbstractCollection!
  to: Abstract!
  position: Int!
}




type REFERENCE_HAS_PAPERID @relation(name: "REFERENCE_HAS_PAPERID") {
  from: Reference!
  to: PaperID!
  position: Int!
}

type ABSTRACT_HAS_CITATION @relation(name: "ABSTRACT_HAS_CITATION") {
  from: Abstract!
  to: Citation!
  position: Int!
}












































type IS_INHIBITOR @relation(name: "IS_INHIBITOR") {
  from: Compound!
  to: Target!
  activity: String!
  moa: String!
  reference: String!
}

type TARGETS @relation(name: "TARGETS") {
  from: Compound!
  to: Target!
  activity: String!
  moa: String
  reference: String!
}

type IS_ANTAGONIST @relation(name: "IS_ANTAGONIST") {
  from: Compound!
  to: Target!
  activity: String!
  moa: String!
  reference: String!
}

type IS_AGONIST @relation(name: "IS_AGONIST") {
  from: Compound!
  to: Target!
  activity: String!
  moa: String!
  reference: String!
}

type IS_ACTIVATOR @relation(name: "IS_ACTIVATOR") {
  from: Compound!
  to: Target!
  activity: String!
  moa: String!
  reference: String!
}

type IS_BINDER @relation(name: "IS_BINDER") {
  from: Compound!
  to: Target!
  activity: String!
  moa: String!
  reference: String!
}

type ASSOCIATES_DaG @relation(name: "ASSOCIATES_DaG") {
  from: Disease!
  to: Gene!
  high_confidence: Int!
  locus: Int!
  primary: Int!
  status: String!
}

type LOCALIZES_DlA @relation(name: "LOCALIZES_DlA") {
  from: Disease!
  to: Anatomy!
  cooccurrence: Int!
  expected: Float!
  p_fisher: Float!
}





